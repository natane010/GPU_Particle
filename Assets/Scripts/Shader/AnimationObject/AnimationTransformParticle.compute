

#pragma kernel RecalcPosition

#define THREAD_NUM 64

#define PI 3.1415926535

#include "../NonAnimationObject/NoiseMath.cginc"

struct AnimationTransformParticle
{
    int isActive;
    int targetId;
    float2 uv;

    float3 targetPosition;

    float speed;
    float3 position;

    int useTexture;
    float scale;

    float4 velocity;

    float3 horizontal;
};

struct AnimationInitData
{
    int isActive;
    float3 targetPosition;

    int targetId;
    float scale;

    float4 velocity;

    float2 uv;
    float3 horizontal;
};

RWStructuredBuffer<AnimationTransformParticle> _Particles;
StructuredBuffer<InitData> _InitDataList;
StructuredBuffer<float4x4> _MatrixData;
StructuredBuffer<uint> _IndexBuffer;

RWTexture2D<float4> CurrPositionBuffer;
RWTexture2D<float4> CurrNormalBuffer;

float _DeltaTime;
float _Time;
float _Gravity;
float3 _Origin;


[numthreads(THREAD_NUM, 1, 1)]
void SetupParticles(uint id : SV_DispatchThreadID)
{
    TransformParticle p = _Particles[id];

    uint idx = _IndexBuffer[id];

    float4x4 mat = _MatrixData[_InitDataList[idx].targetId];

    p.isActive = _InitDataList[idx].isActive;
    p.targetPosition = mul(mat, float4(_InitDataList[idx].targetPosition, 1.0)).xyz;
    p.uv = _InitDataList[idx].uv;
    p.targetId = _InitDataList[idx].targetId;
    p.scale = _InitDataList[idx].scale;
    p.horizontal = _InitDataList[idx].horizontal;
    p.velocity = _InitDataList[idx].velocity;

    _Particles[id] = p;
}

[numthreads(THREAD_NUM, 1, 1)]
void AnimationSetupParticlesImmediately(uint id : SV_DispatchThreadID)
{
    TransformParticle p = _Particles[id];

    uint idx = _IndexBuffer[id];

    float4x4 mat = _MatrixData[_InitDataList[idx].targetId];

    p.isActive = _InitDataList[idx].isActive;
    p.position = mul(mat, float4(_InitDataList[idx].targetPosition, 1.0)).xyz;
    p.targetPosition = p.position;
    p.uv = _InitDataList[idx].uv;
    p.targetId = _InitDataList[idx].targetId;
    p.scale = _InitDataList[idx].scale;
    p.horizontal = _InitDataList[idx].horizontal;
    p.velocity = _InitDataList[idx].velocity;

    _Particles[id] = p;
}

[numthreads(THREAD_NUM, 1, 1)]
void AnimationDisable(uint id : SV_DispatchThreadID)
{
    TransformParticle p = _Particles[id];
    p.isActive = 0;
    _Particles[id] = p;
}